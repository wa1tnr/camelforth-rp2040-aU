results_debugging.txt

Fri Feb 19 22:47:24 UTC 2021

BUG: .S word prints lower case abcdef

Fixed latest commit.

BUG: @ now in question.  Unclear what's going on; thought
this worked easily.

Interim: The @ word ('fetch') seems to work 'a lot' so
have assumed a conceptual error on the part of the human,
rather than the C source. ;)

DUMP still works - different mechanism to fetch?

Assuming it still works in SRAM 0x20000000 space.

Thu Feb 18 18:53:55 UTC 2021

dots_hf.fs focus all morning.

Essentially, the wrapping point was moved from 7FFFFFFF
to -10000 (-FFFF + 1) or thereabouts.

That is to say, it's signed ints but the breaking point
isn't in the usual spot.  This way addresses in D0000000
area come out as positive instead of -30000000 ranges.

Also no more of FFFFFF67 for -99

Not sure what to make of all this - so combined
the usual transforms used mentally into a single
version of .s that will function in a variety of
common situations.

Just be aware that it's internally inconsistent,
in some ways.  Contast with .S from the CamelForth
Author (B Rodriguez) and also the dot word itself
is useful in figuring out what the 'real' number is.


Haven't worked with the (very) new .s word definition
enough to notice what's unsatisfactory about it.

Provides a traditional stack depth in angle braces.

$$

CamelForth in C v0.1 - 14 Feb 2016 - Tue Feb 16 15:34:07 UTC 2021

built: Wed Feb 17 16:04:54 UTC 2021 (or within the hour)

Very good overnight result - even with computer asleep, the
USB port kept active power and when the computer awoke the
next day, the target pico board still looked the same, with
the same stack elements present.

Good build.

Sun Feb 14 22:56:58 UTC 2021

Successful four hour trial - three of them after the
ABEND appears.  CamelForth's interpreter behaves just
the same as if the ABEND had never occured.

In the background, the USB subsystem appears to be
constantly feeding a string of 0xff chars to 'getchar()'
where the ABEND is trapped.

Presumption is that is ongoing and never ends, once it
has begun.  So there is a large internal state difference,
since all those junk 0xff chars are being produced, then
ignored.

That's where things stand now - don't know what to do
about it, other than wait for further understanding
to arise. ;)

$$

Sun Feb 14 17:58:22 UTC 2021

ABEND now normalized - can continue past it.

Once ABEND is reached, system needs a power cycle to
regain true characteristics, but in the meantime, is
useful to interrogate its current state.

Useful as a daily driver, considering the options
presently available.  commit to main soon.

$$

Sun Feb 14 07:08:06 UTC 2021

The watchdog seemed to do what it is supposed to do.
Apparently utilized 'correctly' for this limited use
case.

In future, probably make this a word in forth, such
as 'wdreset' or similar, to provide a reset to the
hardware as a forth word.

Resetting via watchdog did not restore ACM0 access
to the USB port (which quit to system prompt).

UART0 stayed active and showed two extra green Error
messages, no second red ABEND iirc, and was idling
(maybe).  Hard to tell as all keyboard interaction
became impossible (ACM0 no longer passing traffic).

Will probably revert to most recent solution: have
it say ABEND after every keystroke, as those are
interleaved with many (many) 0xFF returns from
(I think it's called) getchar(); after more than a
half hour of normal activity (idling usually).

$$

Sun Feb 14 03:19:10 UTC 2021

So, results are in - regains access to interpreter() and
marks the session as ABEND with every keystroke, as
(approximately) anticipated/designed.

This allows even a COLD reset, or probably a good examination
of the existing stack (the .S word).

Need to run it again to see just what's corrupted, but it
looked like it was fine.


Sun Feb 14 00:25:37 UTC 2021

Very interesting result just now:

A second USB initialization (performed as in the
experimental code) ends the program, but not immediately.

The extra UART0 connection proved to give extra system
state information that was unavailable on the primary
USB connection to the target - nice extra information, there.

The present (experimental variant) program:

54e46957be612bbf86d0d4303139c00c  camelforth-a.uf2

USB0 (cp2104 connection to UART0):

ok COLD CamelForth in C v0.1 - 14 Feb 2016 - Sat Feb 13 22:39:29 UTC 2021
ok ( waiting for abend now at 23:06:37 )
ok .s <4> -63 -62 -61 1006A0D0
ok
  Error
  Error   22:
  Error   33:
  Error
  ABEND
  Error
  Error   22:
  Error   33:
  Error
  ABEND
  Error
  Error   22:
  Error   33:
  Error
  ABEND
  Error
  Error   22:
  Error   33:
  Error
  ABEND
*** PANIC ***

No spinlocks are available

The ACM0 connection was similar, but with fewer ABENDs:

ok COLD CamelForth in C v0.1 - 14 Feb 2016 - Sat Feb 13 22:39:29 UTC 2021
ok ( waiting for abend now at 23:06:37 )
ok .s <4> -63 -62 -61 1006A0D0
ok
  Error
  Error   22:
  Error   33:
  Error
  ABEND
FATAL: read zero bytes from port
term_exitfunc: reset failed for dev UNKNOWN: Input/output error
 linux $ # prompt returns to system from 'picocom' tty program in Linux

$$

Assume an error null arrives at interpreter and needs
to be trapped prior.

$$

The 'accept' word was verified against upstream.
It had (at one time long ago) been modified; but
the version here seems intact wrt the original
(no changes introduced, here) so that should not
be a contributing factor to the '@@@' bug.

Could use a double-check sometime. ;)

$$

This commit ran for an hour before '@@@' crashing the
interpreter loop (if that's what's going on):

 > commit 28370371ddbbfb9c3fcc251f23d710d60364b8e8
 > Author: wa1tnr <wa1tnr@users.noreply.github.com>
 > Date:   Fri Feb 12 19:18:12 2021 +0000

A typical test is a call to COLD and a comment marking
the time ( like this 20:09:04 ) and then forgetting
about that picocom session and doing other work on
the Linux desktop.  picocom is the chosen 'hyperterm'
type program (microcom, minicom, seyon &c also apply,
as does Serial Monitor in Arduino IDE, for example).

Sometimes a longer USB 'extension' cable is used;
other times, direct 3 foot USB A to micro-B cable
is employed (the extension is used to more conveniently
depower the RP2040 to access USB bootloader mode).

$$


ok COLD CamelForth in C v0.1 - 14 Feb 2016 - Fri Feb 12 03:30:02 UTC 2021

577c926164a5daa md5 of the .uf2:

  Still crashes. Takes a good long while, sometimes.

  Even after a -Wall flag to the compiler (code passes this test).

END.
